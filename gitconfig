[core]
	pager = less -RS
	editor = vim

[pager]
	show-branch = true

[rerere]
	enabled = true

[branch]
	autosetuprebase = local

[push]
	default = tracking

[format]
	pretty = default

[pretty]
	default = tformat:%h %ad %Cgreen%an%C(yellow)%d%Creset %s
	machine = tformat:%h %ad <%an> %s
	bold = tformat:%n%h %C(yellow)%ad%Creset %Cgreen%an%Creset %C(bold)%s%Creset
	patch = tformat:%n\
		%n%C(bold red)====================================================================================================================================================%Creset\
		%n%h %C(yellow)%ad%Creset %Cgreen%an%Creset %C(bold)%s%Creset\
		%n%b%C(bold red)====================================================================================================================================================%Creset\

[log]
	date = short

[diff]
	noprefix = true

[color]
	interactive = auto
	diff = auto

[color "diff"]
	whitespace = blue reverse
	frag = yellow
	old = green
	new = cyan

[alias]
	del = branch -D
	phd = push origin HEAD
	new = "!f() { git checkout -b $1 ${2:-$(git br)}; }; f"
	sw = checkout
	stat = status -b -s
	switch = checkout
	co = checkout
	ci = commit
	fixup = !git rebase -i --autosquash $(git br)
	logg = log --graph
	logf = log --pretty=medium
	logn = log --pretty=bold --date=relative --name-status
	logp = log --pretty=patch --date=relative -p --reverse
	logpf = log --pretty=patch --date=relative -p --follow
	logd = log --oneline --decorate --graph
	diffw = diff --color-words
	sh = !git logp -n1
	sb = show-branch
	bell = "!f() { pts=$(ps x -u${UID} | grep sshd | grep -m 1 -o 'pts/[0-9]\\+$'); for I in `seq 1 ${1:-5}`; do echo -ne '\\007' > /dev/${pts:-stdout}; sleep 0.15; done; }; f"
	sbh = "!f() { a=${1/#-/master}; shift; [ \"$a\" == master ] || a=${a:+$a/}; a=${a:-$(git br)}; git show-branch \"$@\" heads/${a%master}\\*; }; f"
	br = "!f() { git config --get-regexp 'branch..*.remote' | perl -lne '/branch.(.*).remote/; $a=$1,$bb=$b if (($b = `git rev-list --first-parent --count $1...'\"$1\"'`) < $bb || !$a); END {print $a}'; }; f"
	bresolve = "!f() { a=$(git config --get branch.$1.remote) b=$(git config --get branch.$1.merge); [ \"$a\" == . ] && echo ${b#refs/remotes/} || echo $a/${b#refs/heads/}; }; f"
	brr = "!f() { git bresolve $(git br \"$1\"); }; f"
	wu = "!f() { a=$1; shift; git logn \"$a..$(git brr \"$a\")\" \"$@\"; }; f"
	wup = "!f() { a=$1; shift; git logp -M \"$a..$(git brr \"$a\")\" \"$@\"; }; f"
	nwu = "!f() { git config --get-regexp 'branch..*.remote' | perl -lne '/branch.(.*).remote/ && print $1' | while read br; do git rev-list --count $br..$(git bresolve $br) | grep -q ^0 || echo \"git wu $br\"; done }; f"
	lp = "!f() { a=$1; shift; git logp \"$(git br \"$a\")..$a\" \"$@\"; }; f"
	cur = "!(if ! git diff HEAD --quiet; then echo -e \"HEAD - \\033[1;31mLocal changes\\033[m\"; echo; git --no-pager diff --name-status HEAD; fi; git --no-pager logn $(git br)..)|less -+C -FXRSM"
	cleanf = clean -xdf
	cleanff = clean -Xdf
	whoami = "!f() { git config --get user.email; git config --get user.name; }; f"
	alias = "!f() { if [ $# == 2 ]; then git config --global alias.\"$@\"; else git config --get-regexp alias; fi; }; f"
	rh = "!f() { cb=$(git br); co=$(git config --get branch.$cb.remote); echo -e This will run: \"\\t\\tgit fetch $co \"'&&'\" git reset --hard $co/$cb\"; echo -n "Press Enter to continue [Ctrl-C to cancel] "; read -s; git fetch $co && git reset --hard $co/$cb; }; f"


